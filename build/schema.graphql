type Ctoken @entity {
  "id of this Ctoken"
  id: ID!
  "ERC20 underlying this Ctoken"
  underlying: UnderlyingAsset!

  "Pool/comptroller this Ctoken is associated with"
  pool: Pool!

  "the reserveFactor"
  reserveFactor: BigInt!

  "administrator fee"
  adminFee: BigInt!

  "fuse fee"
  fuseFee: BigInt!

  "rate per block for loans"
  borrowRatePerBlock: BigInt!

  "supplier yield per block"
  supplyRatePerBlock: BigInt!

  "total amount borrowed"
  totalBorrow: BigInt!

  "total amount supplied value in USD"
  totalBorrowUSD: BigInt!

  "total liquidity, comes from getCash function"
  liquidity: BigInt!

  "total liquidity expressed in USD"
  liquidityUSD: BigInt!

  "total amount supplied"
  totalSupply: BigInt!

  "total amount supplied value in USD"
  totalSupplyUSD: BigInt!

  "total reserves"
  totalReserves: BigInt!

  "total admin fees"
  totalAdminFees: BigInt!

  "ctoken's name"
  name: String!

  "ctoken's symbol"
  symbol: String!

  "ctoken's decimals"
  decimals: Int!

  "ctoken's balance of underlying asset"
  underlyingBalance: BigInt!

  "borrow interestrate for this ctoken"
  borrowAPR: BigDecimal

  "supply yield rate for this ctoken. stored as int because BigDecimal doesnt support exponenet operations"
  supplyAPY: BigDecimal

  "total tokens seized in liquidations"
  totalSeizedTokens: BigInt

  collateralFactor: BigInt
}

type Pool @entity {
  "id of the Comptroller (its address)"
  id: ID!

  "block the pool was created"
  blockCreated: BigInt!

  "address of this pool's comptroller (which is the pool)"
  comptroller: Bytes!

  "address of this comptroller"
  address: Bytes
  "array of Ctokens in this comptroller/pool"
  assets: [Ctoken!]
  underlyingAssets: [UnderlyingAsset!]

  "index of the pool for this comptroller"
  index: BigInt

  # Fields that match Rari's Fuse pool API
  "Name of the Fuse pool this comptroller admins"
  name: String

  "oracle the pool of this comptroller uses"
  priceOracle: Bytes!

  "pool oracle entity"
  poolOracle: PoolOracle!

  "Factor used to determine repayAmount for liquidating"
  closeFactor: BigInt
  "The percent bonus liquidators get for liquidating for underlying pool"
  liquidationIncentive: BigInt

  "total amount supplied value in USD of all assets/ctokens in this pool"
  totalBorrowUSD: BigInt!

  "total liquidity expressed in USD of all assets/ctokens in this pool"
  totalLiquidityUSD: BigInt!

  "total amount supplied value in USD of all assets/ctokens in this pool"
  totalSupplyUSD: BigInt!

  "total tokens seized in liquidations of all this pools ctokens"
  totalSeizedTokens: BigInt!
}

type UnderlyingAsset @entity {
  "Token address"
  id: ID!
  "Token address"
  address: Bytes!
  "Token name"
  name: String
  "Token symbol"
  symbol: String
  "Array of ctokens this token is used in"
  ctokens: [Ctoken!]

  "Array of Pool this token is used in"
  pools: [Pool!]

  "number of decimal places"
  decimals: Int

  "last price any of the relevant price oracles of Pools using this UnderlyingAsset"
  price: BigInt!

  "total amount borrowed of all the assets ctokens"
  totalBorrow: BigInt!

  "total amount supplied value of all the assets ctokens in USD"
  totalBorrowUSD: BigInt!

  "total liquidity, comes from getCash function of all the assets ctokens"
  totalLiquidity: BigInt!

  "total liquidity of all the assets ctokens expressed in USD"
  totalLiquidityUSD: BigInt!

  "total amount of all the assets ctokens supplied"
  totalSupply: BigInt!

  "total amount supplied value of all the assets ctokens in USD"
  totalSupplyUSD: BigInt!
}

type PoolOracle @entity {
  id: ID!
  address: Bytes!
  admin: Bytes!
  defaultOracle: Bytes!
}

type UnderlyingOracle @entity {
  id: ID!
  address: Bytes!
}

type Oracle @entity {
  id: ID!
  address: String!
  name: String!
}

type Utility @entity {
  id: ID!
  "last eth/usd price recorded"
  ethPriceInDai: BigInt!

    # Counts
  cTokenCount: BigInt!
  poolCount: BigInt!
  underlyingCount: BigInt!

}

# Common entities for all protocols

enum Blockchain {
  ETHEREUM
  BSC
  XDAI
  POLYGON
  OPTIMISM
  AVALANCHE
  NEAR
}

enum TokenStandard {
  ERC20
  ERC721
  ERC1155
}

enum ProtocolName {
  UNISWAP_V2
  CURVE_POOL
  STAKE_DAO
  RARI_FUSE
}

enum ProtocolType {
  STAKING
  LENDING
  EXCHANGE
  INSURANCE
  STABLECOIN
  DERIVATIVE
  SYNTHETIC_TOKEN
  TOKEN_MANAGEMENT # Meta LP vaults
  PREDICTION_MARKET
  LP_FARMING
}

enum PositionType {
  INVESTMENT
  DEBT
}

enum TransactionType {
  INVEST
  REDEEM
  BORROW
  REPAY
  TRANSFER_IN
  TRANSFER_OUT
}

type Account @entity {
  id: ID! # {accountAddress}
  positions: [Position!]! @derivedFrom(field: "account")
}

type Token @entity {
  id: ID! # {tokenAddress}
  tokenStandard: TokenStandard!
  name: String
  symbol: String
  decimals: Int
  mintedByMarket: Market
  blockNumber: BigInt! # could be block at which we got first event on this token
  timestamp: BigInt!
}

type Market @entity {
  id: ID! # {protocol pool/pool/vault address}
  account: Account!
  protocolName: ProtocolName!
  protocolType: ProtocolType!
  # Generally protocols accept one or multiple tokens and mint tokens to the depositor to track ownership
  # Some protocols reward DAO tokens or other incentivisation tokens to holders of LP tokens
  # Some protocols don't mint any tokens to track ownership, in that case outputToken is null
  # and inputToken balances are used to calculate returns
  inputTokens: [Token!]! # Tokens that need to be deposited to take a position in protocol
  outputToken: Token # Token that is minted to track ownership of position in protocol
  rewardTokens: [Token!] # Aditional tokens that are given as reward for position in a protocol
  inputTokenTotalBalances: [String!]! # Total balance of this market contract of all input tokens in TokenBalance string format
  outputTokenTotalSupply: BigInt! # Total supply of output token
  blockNumber: BigInt!
  timestamp: BigInt!
  positions: [Position!]! @derivedFrom(field: "market")
  history: [MarketSnapshot!]! @derivedFrom(field: "market")
}

type MarketSnapshot @entity {
  id: ID! # {trasactionHash}{logIndex}
  market: Market!
  inputTokenBalances: [String!]! # TokenBalance string format
  outputTokenTotalSupply: BigInt!
  blockNumber: BigInt!
  timestamp: BigInt!
  transactionHash: String!
  transactionIndexInBlock: BigInt!
  logIndex: BigInt!
}

type Transaction @entity {
  id: ID! # {account}{transactionHash}{logIndex}
  transactionHash: Bytes!
  market: Market!
  marketSnapshot: MarketSnapshot!
  # A transaction.from is always transaction origin because outside EVM transaction.origin and msg.sender are same
  from: Account!
  to: Account
  # token amounts will always be positive here, Their credit or debit status will change based on transaction type
  transactionType: TransactionType!
  inputTokenAmounts: [String!]!
  outputTokenAmount: BigInt!
  rewardTokenAmounts: [String!]!
  transferredFrom: String
  transferredTo: String
  gasUsed: BigInt!
  gasPrice: BigInt!
  blockNumber: BigInt!
  timestamp: BigInt!
  transactionIndexInBlock: BigInt!
}

# String format for a TokenBalance
# tokenAddress|accountAddress|tokenAmountBigInt

# It is required because we want to keep track of closed positions as well
# We can not use same ID for a user's new position after existing one has been closed
# To be able to fetch current open position for a user + market + position type we need
# ID to be dependent on only these three things. There three things will be same for all positions
# of a specific user in specfic market therefore we need this AccountPosition entity
type AccountPosition @entity {
  id: ID! # {userAddress}{marketAddress}{positionType}
  positionCounter: BigInt!
  positions: [Position!]! @derivedFrom(field: "accountPosition")
}

# We can not keep balances and roi updated all the time.
# We can update these only when the account of the position makes some changes in the position
# at others time when market variables are changing because of other's actions then we won't update these
type Position @entity {
  id: ID! # {accountPositionId}{autoIncrement}
  accountPosition: AccountPosition!
  account: Account!
  accountAddress: String!
  market: Market!
  marketAddress: String!
  positionType: PositionType!
  outputTokenBalance: BigInt!
  inputTokenBalances: [String!]! # TokenBalance string format
  rewardTokenBalances: [String!]! # TokenBalance string format
  transferredTo: [String!]!
  closed: Boolean!
  blockNumber: BigInt!
  timestamp: BigInt!
  historyCounter: BigInt!
  history: [PositionSnapshot!]! @derivedFrom(field: "position")
}

# Created before every update (transaction) to Position
type PositionSnapshot @entity {
  id: ID! # {positionId}{autoIncrement}
  position: Position!
  transaction: Transaction!
  outputTokenBalance: BigInt!
  inputTokenBalances: [String!]! # TokenBalance string format
  rewardTokenBalances: [String!]! # TokenBalance string format
  transferredTo: [String!]! # TokenBalance string format
}

# END - Common entities for all protocols

# BEGIN - Aggregate types for Fuse
type CToken_Count @entity {
  id: ID!
  count: BigInt!
}

type UnderlyingAsset_Count @entity {
  id: ID!
  count: BigInt!
}

type Pool_Count @entity {
  id: ID!
  count: BigInt!
}
