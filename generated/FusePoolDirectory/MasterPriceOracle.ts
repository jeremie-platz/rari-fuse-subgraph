// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NewAdmin extends ethereum.Event {
  get params(): NewAdmin__Params {
    return new NewAdmin__Params(this);
  }
}

export class NewAdmin__Params {
  _event: NewAdmin;

  constructor(event: NewAdmin) {
    this._event = event;
  }

  get oldAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewDefaultOracle extends ethereum.Event {
  get params(): NewDefaultOracle__Params {
    return new NewDefaultOracle__Params(this);
  }
}

export class NewDefaultOracle__Params {
  _event: NewDefaultOracle;

  constructor(event: NewDefaultOracle) {
    this._event = event;
  }

  get oldOracle(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOracle(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewOracle extends ethereum.Event {
  get params(): NewOracle__Params {
    return new NewOracle__Params(this);
  }
}

export class NewOracle__Params {
  _event: NewOracle;

  constructor(event: NewOracle) {
    this._event = event;
  }

  get underlying(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get oldOracle(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newOracle(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class MasterPriceOracle extends ethereum.SmartContract {
  static bind(address: Address): MasterPriceOracle {
    return new MasterPriceOracle("MasterPriceOracle", address);
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  defaultOracle(): Address {
    let result = super.call("defaultOracle", "defaultOracle():(address)", []);

    return result[0].toAddress();
  }

  try_defaultOracle(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "defaultOracle",
      "defaultOracle():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  oracles(param0: Address): Address {
    let result = super.call("oracles", "oracles(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_oracles(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("oracles", "oracles(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  canAdminOverwrite(): boolean {
    let result = super.call(
      "canAdminOverwrite",
      "canAdminOverwrite():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_canAdminOverwrite(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canAdminOverwrite",
      "canAdminOverwrite():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getUnderlyingPrice(cToken: Address): BigInt {
    let result = super.call(
      "getUnderlyingPrice",
      "getUnderlyingPrice(address):(uint256)",
      [ethereum.Value.fromAddress(cToken)]
    );

    return result[0].toBigInt();
  }

  try_getUnderlyingPrice(cToken: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUnderlyingPrice",
      "getUnderlyingPrice(address):(uint256)",
      [ethereum.Value.fromAddress(cToken)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  price(underlying: Address): BigInt {
    let result = super.call("price", "price(address):(uint256)", [
      ethereum.Value.fromAddress(underlying)
    ]);

    return result[0].toBigInt();
  }

  try_price(underlying: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("price", "price(address):(uint256)", [
      ethereum.Value.fromAddress(underlying)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get underlyings(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _oracles(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _defaultOracle(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _admin(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _canAdminOverwrite(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class AddCall extends ethereum.Call {
  get inputs(): AddCall__Inputs {
    return new AddCall__Inputs(this);
  }

  get outputs(): AddCall__Outputs {
    return new AddCall__Outputs(this);
  }
}

export class AddCall__Inputs {
  _call: AddCall;

  constructor(call: AddCall) {
    this._call = call;
  }

  get underlyings(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _oracles(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class AddCall__Outputs {
  _call: AddCall;

  constructor(call: AddCall) {
    this._call = call;
  }
}

export class SetDefaultOracleCall extends ethereum.Call {
  get inputs(): SetDefaultOracleCall__Inputs {
    return new SetDefaultOracleCall__Inputs(this);
  }

  get outputs(): SetDefaultOracleCall__Outputs {
    return new SetDefaultOracleCall__Outputs(this);
  }
}

export class SetDefaultOracleCall__Inputs {
  _call: SetDefaultOracleCall;

  constructor(call: SetDefaultOracleCall) {
    this._call = call;
  }

  get newOracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetDefaultOracleCall__Outputs {
  _call: SetDefaultOracleCall;

  constructor(call: SetDefaultOracleCall) {
    this._call = call;
  }
}

export class ChangeAdminCall extends ethereum.Call {
  get inputs(): ChangeAdminCall__Inputs {
    return new ChangeAdminCall__Inputs(this);
  }

  get outputs(): ChangeAdminCall__Outputs {
    return new ChangeAdminCall__Outputs(this);
  }
}

export class ChangeAdminCall__Inputs {
  _call: ChangeAdminCall;

  constructor(call: ChangeAdminCall) {
    this._call = call;
  }

  get newAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeAdminCall__Outputs {
  _call: ChangeAdminCall;

  constructor(call: ChangeAdminCall) {
    this._call = call;
  }
}
